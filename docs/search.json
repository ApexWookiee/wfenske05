[
  {
    "objectID": "WisconsinVotes.html",
    "href": "WisconsinVotes.html",
    "title": "Wisconsin Votes",
    "section": "",
    "text": "Gerrymandering?\nWhen one looks at a map, one expects that Democrats should win about half of the seats and that Republicans should win the other half. However, this is not the case. Instead, this map tells us that Republicans won 5 of 8 available districts with democrats claiming the remaining 3. Gerrymandering is hard to explicitly prove, but intuition tells us that something is off. It is for this reason that we might create these kinds of maps before moving to rigorous statistical methods to tell us if something is unexpected."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Walter’s Wonderful Website",
    "section": "",
    "text": "Link to my GitHub Code\nI am learning how to do data science. Here is a quick example of what this website can do.\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\npenguins %&gt;%\n  drop_na() %&gt;%\n  ggplot(aes(x = body_mass_g, y = bill_length_mm), color = species) +\n  geom_point(aes(color = species))+\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_colorblind() +\n  theme_bw() +\n  labs(\n    x = \"Body Mass (g)\",\n    y = \"Flipper Length (mm)\",\n    color = \"Penguin Species\"\n  )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nThis is a project (or series of projects) created for MSCS 264 (Data Science 2) at St Olaf College. It contains a semseter’s worth of work and lots and lots of troubleshooting and polishing. I hope you enjoy."
  },
  {
    "objectID": "Map_Project.html",
    "href": "Map_Project.html",
    "title": "Terrorism in the United States",
    "section": "",
    "text": "What Can We Learn from this Map?\nIt is no surprise that the the most populous states also have the most terrorist attacks, especially California and New York. However, even states like Florida and Texas do not have as many as CA and NY. This is interesting, suggesting that terrorism may not be a symptom of a larger population but rather something else. Maybe it is economic power or perhaps connection to countries overseas, both of which are strong in NY and CA. Perhaps it also has something to do with the fact that NY and CA are very much symbols of what America stands for.\nAdditionally, there is a large absence of terrorist attacks in the the non coastal states with the exception of Illinois. It is possible that total population does not matter as much, rather the concentration of the population is what matters. Big cities like Los Angeles, Chicago, Seattle, NYC, etc., are definitely attractive targets for potential attackers."
  },
  {
    "objectID": "272FinalProject.html",
    "href": "272FinalProject.html",
    "title": "Twinning Success",
    "section": "",
    "text": "test"
  },
  {
    "objectID": "Simulation.html",
    "href": "Simulation.html",
    "title": "Secret Santa Simulation",
    "section": "",
    "text": "In December 2023, I participated in a Secret Santa event with 16 of my friends (see above). It was my first experience with a Secret Santa in such a large group. To our surprise, when we opened our gifts, my friend Jesse and I discovered that we had been assigned to each other as gift-givers. This was the only case of mutual gift exchange in our group, with no other pairs experiencing this kind of reciprocity. I was curious to know: what were the odds of this happening?\n\nCreate Intial Lineup\nBelow is an example of a table representing a lineup for Secret Santa.\n\ntest_shuffle\n\n# A tibble: 17 × 2\n   recipient giver_shuffle\n   &lt;chr&gt;     &lt;chr&gt;        \n 1 Walter    Bea          \n 2 Nolan     Keegan       \n 3 Michael   Onea         \n 4 Devon     Henry        \n 5 Helen     Carol        \n 6 Bea       Nolan        \n 7 Onea      Devon        \n 8 Shelby    Helen        \n 9 Keegan    Walter       \n10 Henry     Michael      \n11 Sid       Julie        \n12 Carol     Shelby       \n13 Julie     Sid          \n14 Maren     Garret       \n15 Garret    Maren        \n16 Fiona     Gus          \n17 Gus       Fiona        \n\n\nWhat we will do with this table is permute the “giver” column while leaving the “recipient” column as is. We then will count the number of times a reciprocal pair occurs and plot how frequently they occur. However, we must first address one large issue. When permuting columns, it is likely to get a lineup where someone’s name occurs twice in the same row, i.e., they give a gift to themselves. We do not want this to happen, so we must create a workaround.\n\n\nCheck Number of Matches in a Lineup\nThis code does exactly what is mentioned previously: it allows us to detect if there is a lineup where someone gives a gift to themselves.\n\nset.seed(123)\n\n#if this function returns anything but zero, it means there is a match, which we do not want. \ncheckMatch &lt;- function(shuffle){\n  santaLength = nrow(names)\n  match_count = 0\n  bad_tibble_count = 0\n  \n  for (i in 1:santaLength){\n    if(shuffle $recipient[i] != shuffle$giver_shuffle[i])\n      match_count = match_count + 1\n  }\n  if(match_count != count(names)){\n    bad_tibble_count = bad_tibble_count + 1\n  }\n  return(bad_tibble_count)\n}\n\n\n\nSimulate 3000 Lineups\nNow we will simulate 3000 lineups and use our checkMatch() function to find those that are usable. Why 3000 lineups? I figured out ahead of time that this would give us around 1000 usable lineups due to the nature of the derangement of 17 items.\n\n#creating list to store 1000 shuffles \n\nshuffled_tibbles &lt;- list()\n\n# place 3000 permuted tibbles in the list\nfor(i in 1:3000){\n  shuffled_giver &lt;- sample(names$giver)\n  new_tibble &lt;- tibble(recipient = names$recipient, giver_shuffle =shuffled_giver)\n  shuffled_tibbles[[i]] &lt;- new_tibble\n}\n\n#check how many of them have at least one match, where giver and recipient are the same person. \nhow_many_bad_tibbles &lt;- function(list){\n  bad_tibbles = 0\n  for(i in (1:length(shuffled_tibbles))){\n  {\n    if(checkMatch(shuffled_tibbles[[i]]) != 0)\n      bad_tibbles = bad_tibbles + 1\n  }\n}\n  return(bad_tibbles)\n}\n\n#check our shuffled_tibbles\nhow_many_bad_tibbles(shuffled_tibbles)\n\n[1] 1928\n\n\n\n\nInitial Testing Results\nWe can see that 1928 of our lineups had one or more instances of someone giving themselves a gift, which is nearly 2/3rds of all of our lineups.\n\n\nSubset of “Good” Lineups\nTo make sure that we have no rows where the giver and recipient are the same person, we create this function called remove_bad_tibbles. In the end, we will have a list of “good” lineups that we will iterate over to count reciprocal pairs.\n\nremove_bad_tibbles &lt;- function(list){\n  #initialize empty list and an index so we don't skip over indices that don't match the if statement. \n  good_tibbles &lt;- list()\n  good_tibble_index = 0 #r indexes at 1, this should work\n    for(i in (1:length(shuffled_tibbles))){\n  {\n    if(checkMatch(list[[i]]) == 0){ \n      good_tibble_index = good_tibble_index + 1\n      good_tibbles[[good_tibble_index]] &lt;- list[[i]]\n    }\n    \n  }\n    }\n    return(good_tibbles)\n}\n\ngood_tibbles &lt;- remove_bad_tibbles(shuffled_tibbles) #store results in list\nlength(good_tibbles) #total number of tibbles that do not have matches\n\n[1] 1072\n\n\nWe can see that we have simulated 1072 lineups without any matches. For our purposes, this is enough to perform the following analysis.\n\n\nAnalysis of “Good” Lineups\nThe following function checks to see how many reciprocal pairs occur in our usable lineups. A usable lineup is a lineup where nobody gives themselves a gift.\n\ncount_reciprocal_pairs &lt;- function(data) {\n  count = 0\n  \n  for(i in 1:nrow(data)) {\n    # We check if there's a row where the current row's giver is the recipient and vice versa. We essentially reverse the order of recipient and giver and check if that exists elsewhere. \n    reciprocal_exists &lt;- data %&gt;%\n      filter(recipient == data$giver_shuffle[i], giver_shuffle == data$recipient[i]) %&gt;%\n      nrow() # creates a tibble of all matches for a given row of giver/recipient\n    \n    if(reciprocal_exists &gt; 0) {\n      count = count + 1\n    }\n  }\n  \n  # Since each pair is counted twice, we divide the count by 2 to get the unique pairs\n  return(count / 2)\n}\n\nNice! The last thing to do is to plot how frequently each reciprocal pair occurs. What I mean by this is sometimes you will have lineups with 0 reciprocal pairs, sometimes there are 1,2, etc.\n\n\nPlot of Reciprocal Pairs\n\n\n\n\n\n\nsum(pairs_vector)/length(good_tibbles)\n\n[1] 0.5354478\n\n\nA little more than 50% of the time, we can expect that there will be 1 or more reciprocal pairs when creating Secret Santa lineups with 17 people. In the future, I would like to investigate this phenomenon with varying group sizes to see how the frequency of reciprocal pairs changes.\nLink to my GitHub Code"
  },
  {
    "objectID": "StatModeling_Final_Project.html",
    "href": "StatModeling_Final_Project.html",
    "title": "Twinning Success",
    "section": "",
    "text": "{fig-align=“center} {fig-align=”center} {fig-align=“center} {fig-align=”center} {fig-align=“center}"
  }
]